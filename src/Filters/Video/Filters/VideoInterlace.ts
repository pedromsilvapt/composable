import { Filter, FilterStreamRef } from '../../../Filter';
import { Stream } from '../../../Compiler';

/**
  * 11.107 interlace
  * Simple interlacing filter from progressive contents. This interleaves upper (or lower) lines from odd frames with lower (or upper) lines from even frames, halving the frame rate and preserving image height.
  * 
  * 
  * Original        Original             New Frame
  * Frame 'j'      Frame 'j+1'             (tff)
  * ==========      ===========       ==================
  * Line 0  -------------------->    Frame 'j' Line 0
  * Line 1          Line 1  ---->   Frame 'j+1' Line 1
  * Line 2 --------------------->    Frame 'j' Line 2
  * Line 3          Line 3  ---->   Frame 'j+1' Line 3
  * ...             ...                   ...
  * New Frame + 1 will be generated by Frame 'j+2' and Frame 'j+3' and so on
  * 
  * It accepts the following optional parameters:
  */
export class VideoInterlace extends Filter<VideoInterlaceParameters> {
    outputs : FilterStreamRef<VideoInterlaceParameters, VideoInterlace>[];

    public constructor ( inputs : Stream | Stream[] = [], parameters : VideoInterlaceParameters = {} as any ) {
        super( inputs, 'interlace', parameters );
    }
}

export interface VideoInterlaceParameters {
    /** This determines whether the interlaced frame is taken from the even (tff - default) or odd (bff) lines of the progressive frame. */
    scan ?: string | number;
    /**
      * Vertical lowpass filter to avoid twitter interlacing and reduce moire patterns.
      * ‘0, off’
      * Disable vertical lowpass filter
      * ‘1, linear’
      * Enable linear filter (default)
      * ‘2, complex’
      * Enable complex filter. This will slightly less reduce twitter and moire but better retain detail and subjective sharpness impression.
      */
    lowpass ?: string | number;

    [key : string] : string | number;
}

/**
  * 11.107 interlace
  * Simple interlacing filter from progressive contents. This interleaves upper (or lower) lines from odd frames with lower (or upper) lines from even frames, halving the frame rate and preserving image height.
  * 
  * 
  * Original        Original             New Frame
  * Frame 'j'      Frame 'j+1'             (tff)
  * ==========      ===========       ==================
  * Line 0  -------------------->    Frame 'j' Line 0
  * Line 1          Line 1  ---->   Frame 'j+1' Line 1
  * Line 2 --------------------->    Frame 'j' Line 2
  * Line 3          Line 3  ---->   Frame 'j+1' Line 3
  * ...             ...                   ...
  * New Frame + 1 will be generated by Frame 'j+2' and Frame 'j+3' and so on
  * 
  * It accepts the following optional parameters:
  */
export function videoInterlace ( inputs : Stream | Stream[] = [], parameters : VideoInterlaceParameters = {} as any ) {
    return new VideoInterlace( inputs, parameters );
}